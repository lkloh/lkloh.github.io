<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-07-01T15:07:57-07:00</updated><id>http://localhost:4000/</id><title type="html">LK Loh</title><subtitle>Exploring the tech scene in San Francisco.
</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2017/06/30/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-06-30T01:57:45-07:00</published><updated>2017-06-30T01:57:45-07:00</updated><id>http://localhost:4000/jekyll/update/2017/06/30/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/06/30/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">The most useful resource for technical interview prep</title><link href="http://localhost:4000/jekyll/update/2017/06/30/the-most-useful-resource-for-technical-interview-prep.html" rel="alternate" type="text/html" title="The most useful resource for technical interview prep" /><published>2017-06-30T01:57:45-07:00</published><updated>2017-06-30T01:57:45-07:00</updated><id>http://localhost:4000/jekyll/update/2017/06/30/the-most-useful-resource-for-technical-interview-prep</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/06/30/the-most-useful-resource-for-technical-interview-prep.html">&lt;p&gt;&lt;img src=&quot;https://http://localhost:4000/assets/2017/June/30/ctci.jpg&quot; alt=&quot;Cracking the Coding Interview&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It’s not Cracking the Coding Interview! (Photo credit: Amazon) *&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s been a lot written about how to prepare for a technical interview. Some of those resources that I’ve personally used are the &lt;a href=&quot;http://www.crackingthecodinginterview.com/&quot;&gt;above book&lt;/a&gt;, &lt;a href=&quot;https://www.interviewcake.com/&quot;&gt;Interview Cake&lt;/a&gt;, &lt;a href=&quot;https://leetcode.com/&quot;&gt;LeetCode&lt;/a&gt;, &lt;a href=&quot;https://www.hackerrank.com/&quot;&gt;HackerRank&lt;/a&gt;, and &lt;a href=&quot;https://codefights.com/&quot;&gt;CodeFights&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The thing about all the above, is that either way you’re practicing alone. Most of the problems offered are theoretically interesting, but doing a lot of them gets repetitive really quick. And its easy to lose focus once that happens. Or you feel like giving up after hacking at a hard problem for an hour and the online judge keeps saying your test case doesn’t pass due to this weird edge case.&lt;/p&gt;

&lt;p&gt;In any case, I used the above to prepare for a phone interview at a very well known company in Mountain View, and then the onsite interview as well. I thought I knew all the data structures and algorithms that were likely to come up in a technical interview nailed, but I was wrong. It was really hard to come up with things on the fly and explain in properly. I already knew I was going to get rejected by the midway point on the onsite.&lt;/p&gt;

&lt;p&gt;When I got back to my hotel room after the interview, the first thing I did was to pass out. Being in interview mode for 6 hours is tiring. Then I used one of that company’s services to learn about &lt;a href=&quot;https://pramp.com/#/&quot;&gt;Pramp&lt;/a&gt;, which pairs developers who are trying to practice their interviewing skills to practice being interviewed and interviewing others. I also used that service to learn about interviewing.io, which lets developers practice being interviewed. The way it works is that you fill in some information about your technical background, book a one hour slot to practice, and Pramp matches you to someone with a reasonably similar background (a “peer”) so that you both can take turns interviewing each other. They also send you a question to ask your peer when it’s your turn to be the interviewer.&lt;/p&gt;

&lt;p&gt;Well, my first interview at Pramp didn’t go well, but not because the question I was asked was particularly tough. Because I was a new user, Pramp matched me to someone who had used the platform already, and he interviewed me first. I did a decent enough job at answering the question well, and then it was time to switch to me being his interviewer instead. Instead, I stupidly pressed the “end interview” button and terminated the connection permanently. Boy, he must have been pissed. I would be pissed in his place. There was nothing I could do but give him an excellent review, and then contact Pramp to see if they could pass on my apologies to him. They very kindly did, removed his (bad) review of me, and even asked me if there was something with their UI they could improve on to prevent such incidents from occuring. I told them that there wasn’t, because it was my own stupid fault for pressing the wrong button.&lt;/p&gt;

&lt;p&gt;Anyway, I continued using Pramp with more success, and many other interview partners.
It’s a lot easier to focus and push through a hard problem when there 
is a real human being there judging you. 
One of my interview partners even turned out to be a hiring manager from Amazon, 
and I must have impressed him sufficiently as he 
later recommended me for an onsite interview at Amazon!
So, users of Pramp, treat every interview like its a real one – 
because I essentially got to bypass the phone screen at Amazon through Pramp.&lt;/p&gt;

&lt;p&gt;Unfortunately they only have about 50 questions in their database, 
so at some point I ran out of new questions to try on.
So I emailed Pramp again to adjust my user settings to allow me to continue
practising as I was still preparing for onsites at that time.&lt;/p&gt;

&lt;p&gt;Soon afterwards, I got the offer at Mixpanel and eventually signed on.&lt;/p&gt;</content><author><name></name></author><summary type="html">It’s not Cracking the Coding Interview! (Photo credit: Amazon) *</summary></entry><entry><title type="html">Clean Slate</title><link href="http://localhost:4000/wiping/your/harddrive/2017/06/29/clean-slate.html" rel="alternate" type="text/html" title="Clean Slate" /><published>2017-06-29T01:57:45-07:00</published><updated>2017-06-29T01:57:45-07:00</updated><id>http://localhost:4000/wiping/your/harddrive/2017/06/29/clean-slate</id><content type="html" xml:base="http://localhost:4000/wiping/your/harddrive/2017/06/29/clean-slate.html">&lt;p&gt;When you work with software, you may end up &lt;a href=&quot;https://medium.com/friendship-dot-js/i-peeked-into-my-node-modules-directory-and-you-wont-believe-what-happened-next-b89f63d21558&quot;&gt;installing a lot of packages&lt;/a&gt;. 
After a while your computer starts behaving really sluggishly. 
Also, it’s really hard to erase some software packages completely from your hard drive.
&lt;code class=&quot;highlighter-rouge&quot;&gt;brew uninstall &amp;lt;clingy-package&amp;gt;&lt;/code&gt; alone won’t cut it. 
You’ll have to really dig into your system to search for everywhere the 
package could have been installed to as a back up.&lt;br /&gt;
So, that means a scorched earth solution is just a lot easier.&lt;/p&gt;

&lt;p&gt;Thus every 6 months, I end up reinstalling the OS on my MacBookPro. 
Apple makes it really easy to wipe my hard drive and reinstall the OS. 
Just boot in recovery mode, erase the disk, sign in with your apple id, 
and agree to all the licenses without reading them. 
Assuming a decent internet connection, this may take just under an hour.&lt;/p&gt;

&lt;p&gt;I usually back up all my work on Github and BitBucket, 
so unless there is something critical that I’m working on now 
(but I usually make sure that’s not the case before reinstalling the OS), 
I don’t need to do anything else.&lt;/p&gt;

&lt;p&gt;Now to reinstalling everything I need for your my environment. Xcode, LaTeX, Github, Sublime Text are some of the must haves. There are cloud-based frameworks that abstract away the annoying installations for many of these, but it’s hard to get serious work done with them. 
Of course, it means I’ll have to 
generate a add a new ssh key to &lt;a href=&quot;https://help.github.com/articles/connecting-to-github-with-ssh/&quot;&gt;Github&lt;/a&gt;
 and &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/set-up-ssh-for-git-728138079.html&quot;&gt;Bitbucket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Eventually I’ll repeat this after another 6 months.&lt;/p&gt;</content><author><name></name></author><summary type="html">When you work with software, you may end up installing a lot of packages. After a while your computer starts behaving really sluggishly. Also, it’s really hard to erase some software packages completely from your hard drive. brew uninstall &amp;lt;clingy-package&amp;gt; alone won’t cut it. You’ll have to really dig into your system to search for everywhere the package could have been installed to as a back up. So, that means a scorched earth solution is just a lot easier. Thus every 6 months, I end up reinstalling the OS on my MacBookPro. Apple makes it really easy to wipe my hard drive and reinstall the OS. Just boot in recovery mode, erase the disk, sign in with your apple id, and agree to all the licenses without reading them. Assuming a decent internet connection, this may take just under an hour. I usually back up all my work on Github and BitBucket, so unless there is something critical that I’m working on now (but I usually make sure that’s not the case before reinstalling the OS), I don’t need to do anything else. Now to reinstalling everything I need for your my environment. Xcode, LaTeX, Github, Sublime Text are some of the must haves. There are cloud-based frameworks that abstract away the annoying installations for many of these, but it’s hard to get serious work done with them. Of course, it means I’ll have to generate a add a new ssh key to Github and Bitbucket. Eventually I’ll repeat this after another 6 months.</summary></entry><entry><title type="html">The best study spot in Stanford</title><link href="http://localhost:4000/places/to/work/2017/06/28/best-study-spot-in-stanford.html" rel="alternate" type="text/html" title="The best study spot in Stanford" /><published>2017-06-28T01:57:45-07:00</published><updated>2017-06-28T01:57:45-07:00</updated><id>http://localhost:4000/places/to/work/2017/06/28/best-study-spot-in-stanford</id><content type="html" xml:base="http://localhost:4000/places/to/work/2017/06/28/best-study-spot-in-stanford.html">&lt;p&gt;&lt;img src=&quot;https://http://localhost:4000/assets/2017/June/28/overview.JPG&quot; alt=&quot;The best study spot at Stanford&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Its not on &lt;a href=&quot;http://library.stanford.edu/using/study&quot;&gt;this helpful list&lt;/a&gt; provided by Stanford!
Most of them are libraries, but they are too quiet and you can’t eat or drink anything.&lt;/p&gt;

&lt;p&gt;Recently, I went back to Stanford to visit a friend. Before meeting up,
I decided to revisit my favorite study spot on campus to do a little studying for technical interviews.
It’s on the third floor of the 
&lt;a href=&quot;https://english.stanford.edu/about/contact-and-location&quot;&gt;English Department&lt;/a&gt;,
quiet, peaceful, nice surroundings, 
plenty of tables to choose from. 
There’s even a vending machine really close by if you get hungry,
and I spent way more money at it than I should have.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry></feed>